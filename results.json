{"numTotalTestSuites":25,"numPassedTestSuites":25,"numFailedTestSuites":0,"numPendingTestSuites":0,"numTotalTests":73,"numPassedTests":73,"numFailedTests":0,"numPendingTests":0,"numTodoTests":0,"snapshot":{"added":0,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0,"didUpdate":false},"startTime":1751382197458,"success":true,"testResults":[{"assertionResults":[{"ancestorTitles":["useIsMobile hook"],"fullName":"useIsMobile hook should return true when initial state is mobile","status":"passed","title":"should return true when initial state is mobile","duration":24.968983999999864,"failureMessages":[],"meta":{}},{"ancestorTitles":["useIsMobile hook"],"fullName":"useIsMobile hook should return false when initial state is desktop","status":"passed","title":"should return false when initial state is desktop","duration":5.775993999999855,"failureMessages":[],"meta":{}},{"ancestorTitles":["useIsMobile hook"],"fullName":"useIsMobile hook should update from desktop to mobile when resize event occurs","status":"passed","title":"should update from desktop to mobile when resize event occurs","duration":7.817093999999997,"failureMessages":[],"meta":{}},{"ancestorTitles":["useIsMobile hook"],"fullName":"useIsMobile hook should update from mobile to desktop when resize event occurs","status":"passed","title":"should update from mobile to desktop when resize event occurs","duration":7.153327999999874,"failureMessages":[],"meta":{}},{"ancestorTitles":["useIsMobile hook"],"fullName":"useIsMobile hook should clean up event listener on unmount","status":"passed","title":"should clean up event listener on unmount","duration":4.751020000000153,"failureMessages":[],"meta":{}}],"startTime":1751382201032,"endTime":1751382201082.751,"status":"passed","message":"","name":"/app/src/hooks/use-mobile.test.tsx"},{"assertionResults":[{"ancestorTitles":["cn"],"fullName":"cn should merge basic classes","status":"passed","title":"should merge basic classes","duration":10.770773999999847,"failureMessages":[],"meta":{}},{"ancestorTitles":["cn"],"fullName":"cn should merge with conditional classes","status":"passed","title":"should merge with conditional classes","duration":0.5969930000001114,"failureMessages":[],"meta":{}},{"ancestorTitles":["cn"],"fullName":"cn should merge with conflicting classes","status":"passed","title":"should merge with conflicting classes","duration":0.3985450000000128,"failureMessages":[],"meta":{}},{"ancestorTitles":["cn"],"fullName":"cn should handle empty inputs","status":"passed","title":"should handle empty inputs","duration":0.6122760000000653,"failureMessages":[],"meta":{}},{"ancestorTitles":["cn"],"fullName":"cn should handle mixed truthy and falsy conditional classes","status":"passed","title":"should handle mixed truthy and falsy conditional classes","duration":0.3574869999999919,"failureMessages":[],"meta":{}},{"ancestorTitles":["cn"],"fullName":"cn should correctly merge multiple string arguments","status":"passed","title":"should correctly merge multiple string arguments","duration":0.3946410000000924,"failureMessages":[],"meta":{}},{"ancestorTitles":["cn"],"fullName":"cn should correctly merge multiple object arguments","status":"passed","title":"should correctly merge multiple object arguments","duration":0.3397059999999783,"failureMessages":[],"meta":{}},{"ancestorTitles":["cn"],"fullName":"cn should correctly merge mixed string and object arguments","status":"passed","title":"should correctly merge mixed string and object arguments","duration":0.4222869999998693,"failureMessages":[],"meta":{}}],"startTime":1751382202440,"endTime":1751382202454.4224,"status":"passed","message":"","name":"/app/src/lib/utils.test.ts"},{"assertionResults":[{"ancestorTitles":["AggregateStats"],"fullName":"AggregateStats should render null if data array is empty","status":"passed","title":"should render null if data array is empty","duration":19.72763199999963,"failureMessages":[],"meta":{}},{"ancestorTitles":["AggregateStats"],"fullName":"AggregateStats should render null if data prop is null","status":"passed","title":"should render null if data prop is null","duration":2.808979000000363,"failureMessages":[],"meta":{}},{"ancestorTitles":["AggregateStats"],"fullName":"AggregateStats should render null if data prop is undefined","status":"passed","title":"should render null if data prop is undefined","duration":3.171140999999807,"failureMessages":[],"meta":{}},{"ancestorTitles":["AggregateStats"],"fullName":"AggregateStats should correctly calculate and display 'Total Influencers'","status":"passed","title":"should correctly calculate and display 'Total Influencers'","duration":50.43978900000002,"failureMessages":[],"meta":{}},{"ancestorTitles":["AggregateStats"],"fullName":"AggregateStats should correctly calculate and display 'Total Followers'","status":"passed","title":"should correctly calculate and display 'Total Followers'","duration":12.849093000000266,"failureMessages":[],"meta":{}},{"ancestorTitles":["AggregateStats"],"fullName":"AggregateStats should correctly display 'Total Followers' for smaller numbers","status":"passed","title":"should correctly display 'Total Followers' for smaller numbers","duration":46.655177000000094,"failureMessages":[],"meta":{}},{"ancestorTitles":["AggregateStats"],"fullName":"AggregateStats should correctly calculate and display 'Avg. Views'","status":"passed","title":"should correctly calculate and display 'Avg. Views'","duration":11.907305999999608,"failureMessages":[],"meta":{}},{"ancestorTitles":["AggregateStats"],"fullName":"AggregateStats should correctly calculate and display 'Avg. Reach'","status":"passed","title":"should correctly calculate and display 'Avg. Reach'","duration":25.60543699999971,"failureMessages":[],"meta":{}},{"ancestorTitles":["AggregateStats"],"fullName":"AggregateStats should correctly calculate and display 'Avg. Branded Views'","status":"passed","title":"should correctly calculate and display 'Avg. Branded Views'","duration":20.598651000000245,"failureMessages":[],"meta":{}},{"ancestorTitles":["AggregateStats"],"fullName":"AggregateStats should render titles for charts","status":"passed","title":"should render titles for charts","duration":13.757362999999714,"failureMessages":[],"meta":{}},{"ancestorTitles":["AggregateStats"],"fullName":"AggregateStats should render mocked chart components including cells","status":"passed","title":"should render mocked chart components including cells","duration":12.13668400000006,"failureMessages":[],"meta":{}}],"startTime":1751382199584,"endTime":1751382199804.1367,"status":"passed","message":"","name":"/app/src/components/Dashboard/AggregateStats.test.tsx"},{"assertionResults":[{"ancestorTitles":["AlertDialog"],"fullName":"AlertDialog should render AlertDialogTrigger and dialog should be initially closed","status":"passed","title":"should render AlertDialogTrigger and dialog should be initially closed","duration":133.40768400000002,"failureMessages":[],"meta":{}},{"ancestorTitles":["AlertDialog"],"fullName":"AlertDialog should open the dialog when trigger is clicked and render content","status":"passed","title":"should open the dialog when trigger is clicked and render content","duration":109.21585800000003,"failureMessages":[],"meta":{}},{"ancestorTitles":["AlertDialog"],"fullName":"AlertDialog should close the dialog when AlertDialogCancel is clicked","status":"passed","title":"should close the dialog when AlertDialogCancel is clicked","duration":75.6643039999999,"failureMessages":[],"meta":{}},{"ancestorTitles":["AlertDialog"],"fullName":"AlertDialog should trigger action and close the dialog when AlertDialogAction is clicked","status":"passed","title":"should trigger action and close the dialog when AlertDialogAction is clicked","duration":45.75520099999994,"failureMessages":[],"meta":{}},{"ancestorTitles":["AlertDialog"],"fullName":"AlertDialog should have correct accessibility attributes when open","status":"passed","title":"should have correct accessibility attributes when open","duration":33.708414000000175,"failureMessages":[],"meta":{}}],"startTime":1751382200743,"endTime":1751382201140.7085,"status":"passed","message":"","name":"/app/src/components/ui/alert-dialog.test.tsx"},{"assertionResults":[{"ancestorTitles":["Alert component"],"fullName":"Alert component should render correctly with default variant and children","status":"passed","title":"should render correctly with default variant and children","duration":112.78646299999991,"failureMessages":[],"meta":{}},{"ancestorTitles":["Alert component"],"fullName":"Alert component should render correctly with destructive variant","status":"passed","title":"should render correctly with destructive variant","duration":9.42188699999997,"failureMessages":[],"meta":{}}],"startTime":1751382202383,"endTime":1751382202505.4219,"status":"passed","message":"","name":"/app/src/components/ui/alert.test.tsx"},{"assertionResults":[{"ancestorTitles":["Button"],"fullName":"Button should render with default props","status":"passed","title":"should render with default props","duration":123.86628599999995,"failureMessages":[],"meta":{}},{"ancestorTitles":["Button"],"fullName":"Button should render with variant 'outline'","status":"passed","title":"should render with variant 'outline'","duration":9.533660999999938,"failureMessages":[],"meta":{}},{"ancestorTitles":["Button"],"fullName":"Button should render with variant 'secondary'","status":"passed","title":"should render with variant 'secondary'","duration":10.799136999999973,"failureMessages":[],"meta":{}},{"ancestorTitles":["Button"],"fullName":"Button should render with size 'sm'","status":"passed","title":"should render with size 'sm'","duration":7.804063000000042,"failureMessages":[],"meta":{}},{"ancestorTitles":["Button"],"fullName":"Button should render with size 'lg'","status":"passed","title":"should render with size 'lg'","duration":8.991605000000163,"failureMessages":[],"meta":{}},{"ancestorTitles":["Button"],"fullName":"Button should handle click events","status":"passed","title":"should handle click events","duration":12.223138999999946,"failureMessages":[],"meta":{}},{"ancestorTitles":["Button"],"fullName":"Button should render with a child element","status":"passed","title":"should render with a child element","duration":8.97421600000007,"failureMessages":[],"meta":{}},{"ancestorTitles":["Button"],"fullName":"Button should render as disabled","status":"passed","title":"should render as disabled","duration":6.817247999999836,"failureMessages":[],"meta":{}},{"ancestorTitles":["Button"],"fullName":"Button should render as child when asChild prop is true","status":"passed","title":"should render as child when asChild prop is true","duration":10.072328000000198,"failureMessages":[],"meta":{}}],"startTime":1751382202337,"endTime":1751382202537.0723,"status":"passed","message":"","name":"/app/src/components/ui/button.test.tsx"},{"assertionResults":[{"ancestorTitles":["Card Components","Card"],"fullName":"Card Components Card should render an empty card with default classes","status":"passed","title":"should render an empty card with default classes","duration":67.86453600000004,"failureMessages":[],"meta":{}},{"ancestorTitles":["Card Components","Card"],"fullName":"Card Components Card should apply custom className to Card","status":"passed","title":"should apply custom className to Card","duration":7.744117999999844,"failureMessages":[],"meta":{}},{"ancestorTitles":["Card Components","CardHeader"],"fullName":"Card Components CardHeader should render CardHeader with default classes","status":"passed","title":"should render CardHeader with default classes","duration":8.233017000000018,"failureMessages":[],"meta":{}},{"ancestorTitles":["Card Components","CardHeader"],"fullName":"Card Components CardHeader should apply custom className to CardHeader","status":"passed","title":"should apply custom className to CardHeader","duration":5.673120000000154,"failureMessages":[],"meta":{}},{"ancestorTitles":["Card Components","CardTitle"],"fullName":"Card Components CardTitle should render CardTitle with default classes and content","status":"passed","title":"should render CardTitle with default classes and content","duration":14.374892999999929,"failureMessages":[],"meta":{}},{"ancestorTitles":["Card Components","CardTitle"],"fullName":"Card Components CardTitle should apply custom className to CardTitle","status":"passed","title":"should apply custom className to CardTitle","duration":4.5881429999999455,"failureMessages":[],"meta":{}},{"ancestorTitles":["Card Components","CardDescription"],"fullName":"Card Components CardDescription should render CardDescription with default classes and content","status":"passed","title":"should render CardDescription with default classes and content","duration":6.495241000000078,"failureMessages":[],"meta":{}},{"ancestorTitles":["Card Components","CardDescription"],"fullName":"Card Components CardDescription should apply custom className to CardDescription","status":"passed","title":"should apply custom className to CardDescription","duration":3.901114000000007,"failureMessages":[],"meta":{}},{"ancestorTitles":["Card Components","CardContent"],"fullName":"Card Components CardContent should render CardContent with default classes","status":"passed","title":"should render CardContent with default classes","duration":9.175885000000108,"failureMessages":[],"meta":{}},{"ancestorTitles":["Card Components","CardContent"],"fullName":"Card Components CardContent should apply custom className to CardContent","status":"passed","title":"should apply custom className to CardContent","duration":3.6886269999999968,"failureMessages":[],"meta":{}},{"ancestorTitles":["Card Components","CardFooter"],"fullName":"Card Components CardFooter should render CardFooter with default classes","status":"passed","title":"should render CardFooter with default classes","duration":3.1132310000000416,"failureMessages":[],"meta":{}},{"ancestorTitles":["Card Components","CardFooter"],"fullName":"Card Components CardFooter should apply custom className to CardFooter","status":"passed","title":"should apply custom className to CardFooter","duration":3.6674299999999675,"failureMessages":[],"meta":{}},{"ancestorTitles":["Card Components","Combined Card"],"fullName":"Card Components Combined Card should render a Card with Header (Title, Description), Content, and Footer","status":"passed","title":"should render a Card with Header (Title, Description), Content, and Footer","duration":24.290942000000086,"failureMessages":[],"meta":{}},{"ancestorTitles":["Card Components","Combined Card"],"fullName":"Card Components Combined Card should render CardHeader without title/description","status":"passed","title":"should render CardHeader without title/description","duration":5.436689000000115,"failureMessages":[],"meta":{}},{"ancestorTitles":["Card Components","Combined Card"],"fullName":"Card Components Combined Card should render CardContent with children","status":"passed","title":"should render CardContent with children","duration":2.837886000000026,"failureMessages":[],"meta":{}},{"ancestorTitles":["Card Components","Combined Card"],"fullName":"Card Components Combined Card should render CardFooter with children","status":"passed","title":"should render CardFooter with children","duration":2.748559000000114,"failureMessages":[],"meta":{}}],"startTime":1751382199158,"endTime":1751382199334.7485,"status":"passed","message":"","name":"/app/src/components/ui/card.test.tsx"},{"assertionResults":[{"ancestorTitles":["Checkbox"],"fullName":"Checkbox should render with default props (unchecked)","status":"passed","title":"should render with default props (unchecked)","duration":134.87832700000013,"failureMessages":[],"meta":{}},{"ancestorTitles":["Checkbox"],"fullName":"Checkbox should toggle state when clicked (unchecked to checked)","status":"passed","title":"should toggle state when clicked (unchecked to checked)","duration":45.30798899999991,"failureMessages":[],"meta":{}},{"ancestorTitles":["Checkbox"],"fullName":"Checkbox should toggle state when clicked (checked to unchecked)","status":"passed","title":"should toggle state when clicked (checked to unchecked)","duration":31.544511000000057,"failureMessages":[],"meta":{}},{"ancestorTitles":["Checkbox"],"fullName":"Checkbox should render as disabled and not toggle when clicked","status":"passed","title":"should render as disabled and not toggle when clicked","duration":9.005568999999923,"failureMessages":[],"meta":{}},{"ancestorTitles":["Checkbox"],"fullName":"Checkbox should be focusable and respond to keyboard events (space key)","status":"passed","title":"should be focusable and respond to keyboard events (space key)","duration":17.404535000000124,"failureMessages":[],"meta":{}},{"ancestorTitles":["Checkbox"],"fullName":"Checkbox should render with a Label and be associated correctly","status":"passed","title":"should render with a Label and be associated correctly","duration":17.36581299999989,"failureMessages":[],"meta":{}},{"ancestorTitles":["Checkbox"],"fullName":"Checkbox should reflect checked state passed by prop","status":"passed","title":"should reflect checked state passed by prop","duration":8.52487999999994,"failureMessages":[],"meta":{}},{"ancestorTitles":["Checkbox"],"fullName":"Checkbox should reflect unchecked state passed by prop","status":"passed","title":"should reflect unchecked state passed by prop","duration":8.348909000000276,"failureMessages":[],"meta":{}},{"ancestorTitles":["Checkbox"],"fullName":"Checkbox should call onCheckedChange when controlled and clicked","status":"passed","title":"should call onCheckedChange when controlled and clicked","duration":18.619685000000118,"failureMessages":[],"meta":{}}],"startTime":1751382199422,"endTime":1751382199714.6196,"status":"passed","message":"","name":"/app/src/components/ui/checkbox.test.tsx"},{"assertionResults":[{"ancestorTitles":["Input"],"fullName":"Input should render with default props (type text)","status":"passed","title":"should render with default props (type text)","duration":105.38505499999997,"failureMessages":[],"meta":{}},{"ancestorTitles":["Input"],"fullName":"Input should handle change events and update value","status":"passed","title":"should handle change events and update value","duration":15.0133229999999,"failureMessages":[],"meta":{}},{"ancestorTitles":["Input"],"fullName":"Input should render with type 'password'","status":"passed","title":"should render with type 'password'","duration":6.04409499999997,"failureMessages":[],"meta":{}},{"ancestorTitles":["Input"],"fullName":"Input should render with type 'number'","status":"passed","title":"should render with type 'number'","duration":25.361088999999993,"failureMessages":[],"meta":{}},{"ancestorTitles":["Input"],"fullName":"Input should render as disabled","status":"passed","title":"should render as disabled","duration":8.682362000000012,"failureMessages":[],"meta":{}},{"ancestorTitles":["Input"],"fullName":"Input should render with a placeholder","status":"passed","title":"should render with a placeholder","duration":3.747812000000067,"failureMessages":[],"meta":{}},{"ancestorTitles":["Input"],"fullName":"Input should accept and apply a custom className","status":"passed","title":"should accept and apply a custom className","duration":8.863434999999981,"failureMessages":[],"meta":{}},{"ancestorTitles":["Input"],"fullName":"Input should pass through other HTML input props","status":"passed","title":"should pass through other HTML input props","duration":8.308158999999932,"failureMessages":[],"meta":{}}],"startTime":1751382201113,"endTime":1751382201295.308,"status":"passed","message":"","name":"/app/src/components/ui/input.test.tsx"}]}